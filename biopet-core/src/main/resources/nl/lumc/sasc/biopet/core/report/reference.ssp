#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb)
#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb._)
#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb.Implicts._)
#import(nl.lumc.sasc.biopet.core.report.ReportPage)
#import(scala.concurrent.Await)
#import(scala.concurrent.duration.Duration)
<%@ var summary: SummaryDb %>
<%@ var rootPath: String %>
<%@ var pipeline: String %>
<%@ var runId: Int %>
#{
    val settings = summary.getSettingKeys(runId, pipeline,
      keyValues = Map(
        "contigs" -> List("reference", "contigs"),
        "species" -> List("reference", "species"),
        "name" -> List("reference", "name")
    ))
    val contigs = settings.getOrElse("contigs", Some(Map())).getOrElse(Map()).asInstanceOf[Map[String, Map[String, Any]]]

    val referenceFile = Await.result(summary.getFile(runId, pipeline, key = "referenceFasta"), Duration.Inf)
}#

<table class="table">
    <tbody>
        <tr><th>Species</th><td>${settings.get("species")}</td></tr>
        <tr><th>Name</th><td>${settings.get("name")}</td></tr>
        <tr><th>File</th><td>${referenceFile.map(_.path)}</td></tr>
        <tr><th>MD5</th><td>${referenceFile.map(_.md5)}</td></tr>
    </tbody>
</table>

<br/>

<table class="table sortable-theme-bootstrap" data-sortable>
    <thead>
        <tr><th>Contig Name</th><th data-sorted="true" data-sorted-direction="descending">Length</th><th>MD5</th></tr>
    </thead>
    <tbody>
        #for (c <- contigs.toList.sortBy(_._2("length").asInstanceOf[Long]).reverse)
            <tr><th>${c._1}</th><td>${c._2.get("length")}</td><td>${c._2.get("md5")}</td></tr>
        #end
    </tbody>
</table>