#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.File)
#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.Pipeline)
#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.Module)
#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.Sample)
#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.Library)
#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb)
#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb._)
#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb.Implicts._)
#import(nl.lumc.sasc.biopet.core.report.ReportPage)
#import(scala.concurrent.Await)
#import(scala.concurrent.duration.Duration)
<%@ var summary: SummaryDb %>
<%@ var sampleId: Option[Int] = None %>
<%@ var libId: Option[Int] = None %>
<%@ var runId: Int %>
<%@ var files: Seq[File]%>
<%@ var allPipelines: Seq[Pipeline]%>
<%@ var allModules: Seq[Module]%>
<%@ var allSamples: Seq[Sample]%>
<%@ var allLibraries: Seq[Library]%>
<table class="table sortable-theme-bootstrap" data-sortable>
<thead><tr>
    <th>Pipeline</th>
    <th>Module</th>
    <th>Sample</th>
    <th>Library</th>
    <th data-sorted="true" data-sorted-direction="ascending">Key</th>
    <th>path</th>
    <th>md5</th>
</tr></thead>
<tbody>
#for (file <- files)
    <tr><td>${allPipelines.find(_.id == file.pipelineId).map(_.name)}</td>
    <td>${file.moduleId.map(id => allModules.find(x => x.pipelineId == file.pipelineId && file.moduleId == id).map(_.name)).flatten.getOrElse(("-"))}</td>
    <td>${file.sampleId.map(id => allSamples.find(_.id == id).map(_.name)).flatten.getOrElse(("-"))}</td>
    <td>${file.libraryId.map(id => allLibraries.find(_.id == id).map(_.name)).flatten.getOrElse(("-"))}</td>
    <td>${file.key}</td>
    <td>${file.path}</td>
    <td>${file.md5}</td></tr>
#end
</tbody>
</table>
