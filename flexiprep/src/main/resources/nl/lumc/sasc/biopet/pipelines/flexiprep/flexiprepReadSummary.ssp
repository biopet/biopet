#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.Sample)
#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.Library)
#import(nl.lumc.sasc.biopet.core.report.ReportPage)
#import(java.io.File)
#import(nl.lumc.sasc.biopet.pipelines.flexiprep.FlexiprepReport)
<%@ var runId: Int %>
<%@ var sampleId: Option[Int] = None %>
<%@ var libId: Option[Int] = None %>
<%@ var rootPath: String %>
<%@ var outputDir: File %>
<%@ var showPlot: Boolean = false %>
<%@ var showTable: Boolean = true %>
<%@ var showIntro: Boolean = true %>
<%@ var multisample: Boolean = true %>
<%@ var allSamples: Seq[Sample] %>
<%@ var allLibraries: Seq[Library] %>
<%@ var settings: Map[(Int, Int), Map[String, Option[Any]]] %>
<%@ var paired: Boolean %>
<%@ var librariesCount: Int %>
<%@ var clipCount: Int %>
<%@ var trimCount: Int %>
<%@ var seqstatStats: Map[(Int, Int), Map[String, Option[Any]]] %>
<%@ var seqstatQCStats: Map[(Int, Int), Map[String, Option[Any]]] %>
<%@ var clippingStats: Map[(Int, Int), Map[String, Option[Any]]] %>
<%@ var trimmingStats: Map[(Int, Int), Map[String, Option[Any]]] %>
<%@ var summaryPlotLinesR1: Option[Seq[String]] %>
<%@ var summaryPlotLinesR2: Option[Seq[String]] %>

#{
    val samples = sampleId.map(id => allSamples.filter(_.id == id)).getOrElse(allSamples)
    val libraries = libId.map(id => allLibraries.filter(_.id == id)).getOrElse(allLibraries)
}#

#if (showIntro)
    <br/>
    <div class="row">
    <div class="col-md-1"></div>
    <div class="col-md-6">
        <p>
            #if (trimCount == librariesCount && clipCount == librariesCount)
                You have selected both <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Alternative_clipping_strategies_.28Adaptor_clipping.29">adaptor clipping</a> and <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Sequence_Quality_Trimming">read trimming</a> as pre-processing steps
            #elseif (trimCount == librariesCount && clipCount == 0)
                You have selected only <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Sequence_Quality_Trimming">read trimming</a> as pre-processing step
            #elseif (trimCount == 0 && clipCount == librariesCount)
                You have selected only <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Alternative_clipping_strategies_.28Adaptor_clipping.29">adaptor clipping</a> as pre-processing step
            #elseif (trimCount == 0 && clipCount == 0)
                You have selected no pre-processing step to be performed
            #elseif (trimCount > 0 && clipCount == 0)
                You have chosen to perform <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Sequence_Quality_Trimming">read trimming</a> for some libraries, but not all.
            #elseif (trimCount == 0 && clipCount > 0)
                You have chosen to turn <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Alternative_clipping_strategies_.28Adaptor_clipping.29">adaptor clipping</a> for some libraries, but not all.
            #else
                You have chosen to turn <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Alternative_clipping_strategies_.28Adaptor_clipping.29">adaptor clipping</a> and <a href="https://en.wikibooks.org/wiki/Next_Generation_Sequencing_%28NGS%29/Pre-processing#Sequence_Quality_Trimming">read trimming</a> off for some libraries, but not all.
            #end
        </p>
        <p>
            #if(sampleId.isDefined && libId.isDefined)
                Here we show aggregated quality statistics for sequencing library ${libId} for sample ${sampleId}. It shows the total number of reads used after quality control, and the total number of reads discarded during quality control. This is done for both forward and reverse reads.
            #elseif(sampleId.isDefined)
                Here we show aggregated quality statistics for every sequencing library for sample ${sampleId}. It shows the total number of reads used after quality control, and the total number of reads discarded during quality control. This is done for both forward and reverse reads.
            #else
                Here we show aggregated quality statistics for every sequencing library. It shows the total number of reads used after quality control, and the total number of reads discarded during quality control. This is done for both forward and reverse reads.
                We show two plots; one for the forward read in the pair, and another one of the reverse read in the pair.
                Red denotes number of reads left after QC. Green denotes reads filtered by adaptor clipping.
                Blue denotes number of reads filtered by read trimming.
                Purple denotes the amount of <em>synced</em> reads. That is, reads removed in one orientation should be removed in the other as well to ensure correctness.
            #end
        </p>
    </div>
    </div>
#end

#if (showPlot)
    #{
        FlexiprepReport.readSummaryPlot(outputDir, "QC_Reads_R1","R1", summaryPlotLinesR1.getOrElse(Seq("")))
        if (paired) FlexiprepReport.readSummaryPlot(outputDir, "QC_Reads_R2","R2", summaryPlotLinesR2.getOrElse(Seq("")))
    }#
    <div class="panel-body">
    <div class="row">
        <div class="col-sm-6 col-md-6">
            <img src="QC_Reads_R1.png" class="img-responsive">
        </div>
        #if (paired)
        <div class="col-sm-6 col-md-6">
            <img src="QC_Reads_R2.png" class="img-responsive">
        </div>
        #end
    </div>

    </div>
    <div class="panel-footer">
    #if (showTable)
        <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#QC_ReadsTable">Hide table</button>
    #else
        <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#QC_ReadsTable">Show table</button>
    #end

    <a href="QC_Reads_R1.tsv"><button type="button" class="btn btn-info"><i class="glyphicon glyphicon-cloud-download"></i> R1 reads stats</button></a>
    #if (paired)
    <a href="QC_Reads_R2.tsv"><button type="button" class="btn btn-info"><i class="glyphicon glyphicon-cloud-download"></i> R2 reads stats</button></a>
    #end
    </div>
#end

<div class="panel-body collapse #if (showTable)in#end" id="QC_ReadsTable">

<!-- Table -->
<table class="table sortable-theme-bootstrap">
    <thead><tr>
        <th>Sample</th>
        <th colspan="2">Library</th>
        <th>Before QC</th>
        <th>Clipping</th>
        <th>Trimming</th>
        #if (paired == true) <th>Out of Sync</th> #end
        <th>After QC</th>
    </tr></thead>
    <tbody>
        #for (sample <- samples.sortBy(_.name))
            #{
                val sampleRowspan = {
                libraries.filter(_.sampleId == sample.id).size +
                settings.filter(_._1._1 == sample.id).count(_._2("paired").getOrElse(false) == true)
                }
            }#
            <tr><td rowspan="${sampleRowspan}">
            #if (multisample)
                <a href="${rootPath}Samples/${sample.name}/index.html">${sample.name}</a>
            #else
                ${sample.name}
            #end
            </td>
            #for (lib <- libraries.filter(_.sampleId == sample.id))
                #{ val paired = settings.filter(_._1._1 == sample.id).filter(_._1._2 == lib.id).head._2("paired") == Some(true) }#
                <td #if (paired == true) rowspan="2" #end>
                    #if (multisample)
                        <a href="${rootPath}Samples/${sample.name}/Libraries/${lib.name}/index.html">${lib.name}</a>
                    #else
                        ${lib.name}
                    #end
                </td>
                #{ val reads = if (paired) List("R1", "R2") else List("R1") }#
                #for (read <- reads)
                    #if (read == "R2") </tr><tr> #end
                    #{
                        val beforeTotal = seqstatStats(sample.id,lib.id)("num_total").getOrElse(0).toString.toLong
                        val afterTotal = seqstatQCStats(sample.id,lib.id)("num_total").getOrElse(0).toString.toLong
                        val clippingDiscardedToShort = clippingStats(sample.id,lib.id)("num_reads_discarded_too_short").getOrElse(0).toString.toLong
                        val clippingDiscardedToLong = clippingStats(sample.id,lib.id)("num_reads_discarded_too_long").getOrElse(0).toString.toLong
                        val trimmingDiscarded = trimmingStats(sample.id,lib.id)("num_reads_discarded").getOrElse(0).toString.toLong
                    }#
                    <td>${read}</td>
                    <td>${beforeTotal}</td>
                    <td>${clippingDiscardedToShort + clippingDiscardedToLong}</td>
                    <td>${trimmingDiscarded}</td>
                    #if (paired == true) <td>${beforeTotal - clippingDiscardedToShort - clippingDiscardedToLong - trimmingDiscarded - afterTotal}</td> #end
                    <td>${afterTotal}</td>
                #end
                </tr>
            #end
        #end
    </tbody>

</table>
</div>
