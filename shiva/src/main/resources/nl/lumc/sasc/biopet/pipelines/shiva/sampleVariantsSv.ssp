#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb)
#import(nl.lumc.sasc.biopet.utils.summary.db.Schema.Sample)
#import(java.io.File)
<%@ var summary: SummaryDb %>
<%@ var allSamples: Seq[Sample]%>
<%@ var rootPath: String %>
<%@ var outputDir: File %>
<%@ var runId: Int %>
<%@ var sampleId: Option[Int] = None %>
<%@ var showPlot: Boolean = false %>
<%@ var showTable: Boolean = true %>
<%@ var showIntro: Boolean = true %>

#{
    val sampleNames: Seq[String] = sampleId match {
       case Some(sampleId) => Seq(allSamples.filter(s => s.id == sampleId).head.name)
       case _ => allSamples.collect({case s: Sample => s.name}).sorted
    }

    val counts: Map[String, Map[String, Array[Long]]] = ShivaSvCallingReport.parseSummaryForSvCounts(summary, runId, sampleNames)
    val traCounts: Map[String, Long] = ShivaSvCallingReport.parseSummaryForTranslocations(summary, runId, sampleNames)

    var svTypes = List(
    SvTypeForReport("DEL", "Deletions", "svSummaryDeletions.tsv", "svSummaryDeletions.png"),
    SvTypeForReport("DUP", "Duplications", "svSummaryDuplications.tsv", "svSummaryDuplications.png"),
    SvTypeForReport("INS", "Insertions", "svSummaryInsertions.tsv", "svSummaryInsertions.png"),
    SvTypeForReport("INV", "Inversions", "svSummaryInversions.tsv", "svSummaryInversions.png"))
    svTypes = svTypes.filter(sv => counts.contains(sv.svType))
    val tsvAllTypes = "svSummary.tsv"

    ShivaSvCallingReport.writeTsvFiles(sampleNames, counts, svTypes, tsvAllTypes, outputDir)
    ShivaSvCallingReport.createPlots(svTypes, outputDir)
}#


#if (showPlot)
    <div class="panel-body">
    #for (sv <- svTypes)
        <img src="${sv.pngFileName}" />
    #end
    </div>
    #if (traCounts.nonEmpty)
        <div class="panel-body">
        <h5>Number of translocation events detected:</h5>
        <table class="table table-condensed" style="width:auto">
            <thead><tr>
            #for (sampleName <- sampleNames)
                <th>${sampleName}</th>
            #end
            </tr></thead>
            <tbody><tr>
            #for (sampleName <- sampleNames)
                #{
                    val sampleCount: String = traCounts.get(sampleName) match {
                        case Some(c) => c.toString
                        case None => "-"
                    }
                }#
                <td>${sampleCount}</td>
            #end
            </tr></tbody>
        </table>
        </div>
    #end
    <div class="panel-footer">
        <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#svSummaryTable">
            #if (showTable)
                <i class="glyphicon glyphicon-eye-close"></i> Hide tables
            #else
                <i class="glyphicon glyphicon-eye-open"></i> Show tables
            #end
        </button>
        <a href="${tsvAllTypes}"><button type="button" class="btn btn-info"><i class="glyphicon glyphicon-cloud-download"></i> Data points</button></a>
    </div>
#end

<div class="panel-body collapse #if (showTable)in#end" id="svSummaryTable">

#for (sv <- svTypes)
#{
    val countsForSvType: Map[String, Array[Long]] = counts(sv.svType)
    val missingCounts: Array[String] = Array.fill(ShivaSvCallingReport.histogramText.size) { "-" }
}#
<h3>${sv.displayText}</h3>
<table class="table sortable-theme-bootstrap" data-sortable>
    <thead><tr><th data-sorted="true" data-sorted-direction="ascending">Sample</th>
        #for (text <- ShivaSvCallingReport.histogramText)
            <th>${text}</th>
         #end
    </tr></thead>
    <tbody>
        #for (sampleName <- sampleNames)
            <tr>
            <td><a href="${rootPath}Samples/${sampleName}/index.html">${sampleName}</a></td>
            #{
                val sampleCounts: Array[String] = countsForSvType.get(sampleName) match {
                    case Some(c: Array[_]) => c.collect({case x => x.toString})
                    case None => missingCounts
                }
            }#

            #for (countForSize <- sampleCounts)
                <td>${countForSize}</td>
            #end
            </tr>
        #end
    </tbody>
</table>

#end
</div>
